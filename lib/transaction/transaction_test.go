package transaction

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"encoding/gob"
	"encoding/hex"
	"fmt"
	"time"

	"testing"
)

func TestHash(t *testing.T) {
	PubKey := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9}

	inputs := []TXInput{
		TXInput{[]byte{1, 2, 3}, 0, []byte{}, PubKey},
		TXInput{[]byte{4, 5, 6}, 1, []byte{}, PubKey},
	}

	outputs := []TXOutput{
		TXOutput{1, []byte{4, 3, 2, 1}},
		TXOutput{2, PubKey},
	}

	newTX := Transaction{nil, inputs, outputs, 0}

	layout := "2006-01-02T15:04:05.000Z"
	str := "2014-11-12T11:45:26.371Z"
	time, _ := time.Parse(layout, str)
	newTX.Time = time.UnixNano()

	newTX.Hash()

	expected := "913acaf3f296c048df72565c3940b33afdbdba1b0683bd71969491a549a86ba3"

	expectedBytes, _ := hex.DecodeString(expected)

	if bytes.Compare(expectedBytes, newTX.ID) != 0 {
		t.Fatalf("Got \n%x\nexpected\n%x", newTX.ID, expected)
	}
}

func TestSignature(t *testing.T) {
	// wallet pub key, private key, transaction, input transactions
	testSets := [][]string{
		[]string{
			"5ff84be8f7307d6e612fc0b03c8ea6ab78eaafc3f24e883608d7904b9e228085c4ae87399ac7a0d174189cb0ad9c2f748d537d33a79b8b5f2532dd0a9db49fa3",
			"2eff830301010a507269766174654b657901ff8400010201095075626c69634b657901ff860001014401ff880000002fff85030101095075626c69634b657901ff860001030105437572766501100001015801ff880001015901ff880000000aff87050102ff8a00000046ff8401011963727970746f2f656c6c69707469632e703235364375727665ff8b0301010970323536437572766501ff8c000101010b4375727665506172616d7301ff8e00000053ff8d0301010b4375727665506172616d7301ff8e00010701015001ff880001014e01ff880001014201ff88000102477801ff88000102477901ff8800010742697453697a6501040001044e616d65010c000000fe012cff8cffbd01012102ffffffff00000001000000000000000000000000ffffffffffffffffffffffff012102ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325510121025ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b0121026b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2960121024fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f501fe02000105502d323536000001210246f585fef37737848aa0640f6bafa584c06d9262e9e089baef1fe7d016051ef90121024e331f5ee6fd6097e2fcbfe843c6d85329d72d8c79a6b4f7e500621f914abe900001210256b953cb066abb501782a6cfd15b86fd7fd48c3f41e3a2add4354ffebe79f1a700",
			"3cff850301010b5472616e73616374696f6e01ff8600010401024944010a00010356696e01ff8a000104566f757401ff8e00010454696d65010400000024ff89020101155b5d7472616e73616374696f6e2e5458496e70757401ff8a0001ff88000040ff87030101075458496e70757401ff88000104010454786964010a000104566f757401040001095369676e6174757265010a0001065075624b6579010a00000025ff8d020101165b5d7472616e73616374696f6e2e54584f757470757401ff8e0001ff8c00002fff8b0301010854584f757470757401ff8c000102010556616c7565010800010a5075624b657948617368010a000000ffbaff86020101209990641f3c4f9ea8fad0232b61c977d05001b84c9bad1f78694ea9f54886778f010202405ff84be8f7307d6e612fc0b03c8ea6ab78eaafc3f24e883608d7904b9e228085c4ae87399ac7a0d174189cb0ad9c2f748d537d33a79b8b5f2532dd0a9db49fa300010201f8c11bb19ad726c03f0114e66c0dbd5f2ac73c29ce9306c8e69cf9b10f9d0b0001f834e24c5d433ad83f0114d72b6656e0506db29d8c040fc915276b84bf91630001f82a3c722f497bf70400",
			"0fff8f040102ff9000010c01ff8600003cff850301010b5472616e73616374696f6e01ff8600010401024944010a00010356696e01ff8a000104566f757401ff8e00010454696d65010400000024ff89020101155b5d7472616e73616374696f6e2e5458496e70757401ff8a0001ff88000040ff87030101075458496e70757401ff88000104010454786964010a000104566f757401040001095369676e6174757265010a0001065075624b6579010a00000025ff8d020101165b5d7472616e73616374696f6e2e54584f757470757401ff8e0001ff8c00002fff8b0301010854584f757470757401ff8c000102010556616c7565010800010a5075624b657948617368010a000000fe0161ff900001403939393036343166336334663965613866616430323332623631633937376430353030316238346339626164316637383639346561396635343838363737386601209990641f3c4f9ea8fad0232b61c977d05001b84c9bad1f78694ea9f54886778f01010120eaedbf14a6b88b628a703fc3c42db22f69b4a599aaee9d6093584278fdf25101010201407b84e71cd31bd67cf83daddbdb41d3df642f405298d8064fa870f126089bc83b89c71f0d6b53cd2ecd01386c56a06b6b060c836b8968cee93c83a9e832647aea01405ff84be8f7307d6e612fc0b03c8ea6ab78eaafc3f24e883608d7904b9e228085c4ae87399ac7a0d174189cb0ad9c2f748d537d33a79b8b5f2532dd0a9db49fa300010201f8c11bb19ad726c03f0114e66c0dbd5f2ac73c29ce9306c8e69cf9b10f9d0b0001f80ab85295d726e03f0114d72b6656e0506db29d8c040fc915276b84bf91630001f82a3c722f0a00812200",
		},
	}

	for ind, test := range testSets {
		// create wallet
		pubKey, _ := hex.DecodeString(test[0])

		PrivateKey := ecdsa.PrivateKey{}
		tb, _ := hex.DecodeString(test[1])
		gob.Register(elliptic.P256())
		decoder := gob.NewDecoder(bytes.NewReader(tb))
		decoder.Decode(PrivateKey)

		tb, _ = hex.DecodeString(test[2])
		tx := Transaction{}
		tx.DeserializeTransaction(tb)

		prevTXs := []*Transaction{}
		tb, _ = hex.DecodeString(test[3])
		decoder = gob.NewDecoder(bytes.NewReader(tb))
		decoder.Decode(prevTXs)

		fmt.Printf("Wallet %d %x\n", ind, pubKey)
		fmt.Println(PrivateKey)
	}
}
